{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#lslservicecollections","title":"LSL.ServiceCollections","text":"<p>A library providing various extensions to <code>IServiceCollection</code></p> <p>At present it contains:</p> <ul> <li>Fluently <code>TryAdd</code> for all lifetimes (all methods return the original <code>IServiceCollection</code> for further chaining)</li> </ul>"},{"location":"01-example/","title":"Fluently adding example","text":"<pre><code>var services = new ServiceCollection()\n    .FluentlyTryAdd(s =&gt; s\n        .Singleton&lt;TestClass&gt;()\n\n        // This will not be done as we have already \n        // added it\n        .Singleton&lt;TestClass&gt;()\n\n        // This will be added\n        .Singleton&lt;ITestClass, TestClass&gt;()\n\n        // This will not be done as we have already \n        // added it\n        .Singleton&lt;ITestClass, TestClass&gt;()\n\n        // This will be added\n        .Transient&lt;TestClass2&gt;()\n\n        // This will not be done as we have already \n        // added it (as a transient)\n        .Scoped&lt;TestClass2&gt;()\n\n        // This will not be done as we have already \n        // added it\n        .Descriptor(ServiceDescriptor.Singleton(\n            typeof(ITestClass), \n            typeof(TestClass)))\n    );\n\n// services will only have:\n// `TestClass`, `TestClass2` and `ITestClass` registered\n</code></pre>"}]}